# quickmeet-backend/ppt_generator.py

import io
from pptx import Presentation
from pptx.util import Pt

def create_ppt(summary_text, action_items_text):
    """
    Generate a PowerPoint presentation containing the summary and action items.
    Returns a BytesIO object with the PPT file.
    """
    # Create a new PowerPoint presentation
    prs = Presentation()

    # 1) Title Slide (optional)
    title_layout = prs.slide_layouts[0]  # Title Slide layout
    title_slide = prs.slides.add_slide(title_layout)
    title_slide.shapes.title.text = "Meeting Summary & Action Items"
    subtitle_placeholder = title_slide.placeholders[1]
    subtitle_placeholder.text = "Generated by QuickMeet"

    # 2) Summary Slide
    summary_layout = prs.slide_layouts[1]  # Title and Content layout
    summary_slide = prs.slides.add_slide(summary_layout)
    summary_slide.shapes.title.text = "Summary"

    summary_placeholder = summary_slide.shapes.placeholders[1]
    summary_placeholder.text = summary_text if summary_text else "No summary available."

    # Increase font size for summary
    for shape in summary_slide.shapes:
        if hasattr(shape, "text_frame") and shape.text_frame:
            for paragraph in shape.text_frame.paragraphs:
                paragraph.font.size = Pt(14)

    # 3) Action Items Slide
    action_layout = prs.slide_layouts[1]
    action_slide = prs.slides.add_slide(action_layout)
    action_slide.shapes.title.text = "Action Items"

    action_placeholder = action_slide.shapes.placeholders[1]
    action_placeholder.text = action_items_text if action_items_text else "No action items found."

    # Increase font size for action items
    for shape in action_slide.shapes:
        if hasattr(shape, "text_frame") and shape.text_frame:
            for paragraph in shape.text_frame.paragraphs:
                paragraph.font.size = Pt(14)

    # Save the presentation to an in-memory BytesIO object
    ppt_io = io.BytesIO()
    prs.save(ppt_io)
    ppt_io.seek(0)
    
    return ppt_io
